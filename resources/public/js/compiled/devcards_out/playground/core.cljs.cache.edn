;; Analyzed by ClojureScript 1.7.170
{:use-macros {testing cljs.test, html sablono.core, is cljs.test, defui om.next, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name playground.core, :imports nil, :requires {om om.next, om.next om.next, sablono.core sablono.core, devcards.core devcards.core, cljs.test cljs.test}, :uses nil, :defs {linear-scale {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 34, :column 7, :end-line 34, :end-column 19, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, :name playground.core/linear-scale, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 19, :method-params ([p__32964 p__32965]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, main {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 111, :column 7, :end-line 111, :end-column 11, :arglists (quote ([]))}, :name playground.core/main, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, years-til-retirement {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 13, :column 7, :end-line 13, :end-column 27, :arglists (quote ([{:keys [salary expenses rate-of-return]}]))}, :name playground.core/years-til-retirement, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 27, :method-params ([p__32946]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [salary expenses rate-of-return]}]))}, editable-parameter {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 71, :column 7, :end-line 71, :end-column 25, :arglists (quote ([state [k v]]))}, :name playground.core/editable-parameter, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 25, :method-params ([state p__32983]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state [k v]]))}, multiplier {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 26, :column 7, :end-line 26, :end-column 17, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, :name playground.core/multiplier, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 17, :method-params ([p__32952 p__32953]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, column-chart {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 46, :column 7, :end-line 46, :end-column 19, :arglists (quote ([data width height]))}, :name playground.core/column-chart, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 19, :method-params ([data width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data width height]))}, offset {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, :name playground.core/offset, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 13, :method-params ([p__32958 p__32959]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[domain-start domain-end] [range-start range-end]]))}, coercion-to-example-type {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 66, :column 10, :end-line 66, :end-column 34}, :name playground.core/coercion-to-example-type, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, sample-data {:name playground.core/sample-data, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 24, :column 1, :end-line 24, :end-column 17, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 24, :column 6, :end-line 24, :end-column 17}}, retirement-vals {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 96, :column 7, :end-line 96, :end-column 22, :arglists (quote ([m]))}, :name playground.core/retirement-vals, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 22, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, coerce-to-type-of {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 61, :column 7, :end-line 61, :end-column 24, :arglists (quote ([orig v]))}, :name playground.core/coerce-to-type-of, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 24, :method-params ([orig v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([orig v]))}, display-thousands {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([n]))}, :name playground.core/display-thousands, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, translate {:protocol-inline nil, :meta {:file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([x y]))}, :name playground.core/translate, :variadic false, :file "/Users/bert/Dropbox/source/playground/src/playground/core.cljs", :end-column 16, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}}, :require-macros {om om.next, om.next om.next, sablono.core sablono.core, devcards.core devcards.core, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:y :path every? = :title-card :transform :color salary :number :button :saying :func :ns :name :expenses :coercion-to-example-type :file :end-column :width :dy :type playground.core/coercion-to-example-type :documentation :column :playground.core expenses coercion-to-example-type :div :g :editing :main-obj :fail :rate-of-return :line not :initial-data :expected :end-line playground.core :error :options :x :pass :input :editable-parameters :arglists rate-of-return coerce-to-type-of :actual :doc :rect :test :onClick :interactive-chart number? :message :height :salary :text}, :order [:path :func :playground.core :title-card :name :documentation :main-obj :initial-data :options :salary :expenses :rate-of-return every? number? salary expenses rate-of-return :g :transform :rect :y :height :width :text :x :dy :color :coercion-to-example-type :type :expected :actual :message :error = coerce-to-type-of :pass :fail not playground.core/coercion-to-example-type :ns :file :end-column :column :line :end-line :arglists :doc :test playground.core coercion-to-example-type :editing :div :input :button :onClick :editable-parameters :saying :number :interactive-chart]}, :doc nil}